q
library(readxl)
library(dplyr)
pv_up20MW <- read_excel("data/Global-Solar-Power-Tracker-February.xlsx", sheet = "20 MW+")
pv_up20MW <- read_excel("C:\David\TFM_gangas\gangas_pv\data\Global-Solar-Power-Tracker-February.xlsx", sheet = "20 MW+")
pv_up20MW <- read_excel("C:/David/TFM_gangas/gangas_pv/data/Global-Solar-Power-Tracker-February.xlsx", sheet = "20 MW+")
pv_up20MW <- read_excel("C:/David/TFM_gangas/gangas_pv/data/Global-Solar-Power-Tracker-February-2025.xlsx", sheet = "20 MW+")
pv_data <- read_excel("C:/David/TFM_gangas/gangas_pv/data/Global-Solar-Power-Tracker-February-2025.xlsx", sheet = "20 MW+")
# Read both sheets
pv_20plus <- read_excel(pv_data, sheet = "20 MW+")
pv_1_20   <- read_excel(pv_data, sheet = "1-20 MW")
library(readxl)
library(dplyr)
pv_data <- read_excel("C:/David/TFM_gangas/gangas_pv/data/Global-Solar-Power-Tracker-February-2025.xlsx", sheet = "20 MW+")
# Read both sheets
pv_20plus <- read_excel(pv_data, sheet = "20 MW+")
# Read both sheets
pv_up20MW <- read_excel(pv_data, sheet = "20 MW+")
pv_data <- read_excel("C:/David/TFM_gangas/gangas_pv/data/Global-Solar-Power-Tracker-February-2025.xlsx")
# Read both sheets
pv_up20MW <- read_excel(pv_data, sheet = "20 MW+")
pv_data <- read_excel("C:/David/TFM_gangas/gangas_pv/data/Global-Solar-Power-Tracker-February-2025.xlsx")
# Read both sheets
pv_up20MW <- read_excel(pv_data, sheet = "20 MW+")
pv_down20MW   <- read_excel(pv_data, sheet = "1-20 MW")
pv_data <- "C:/David/TFM_gangas/gangas_pv/data/Global-Solar-Power-Tracker-February-2025.xlsx"
# Leer cada hoja por separado
pv_up20MW   <- read_excel(pv_data, sheet = "20 MW+")
pv_down20MW <- read_excel(pv_data, sheet = "1-20 MW")
# Filter only Spain
pv_up20MW <- pv_up20MW %>%
filter(`Country/Area` == "Spain")
pv_down20MW <- pv_down20MW %>%
filter(`Country/Area` == "Spain")
# Combine into one dataset
pv_spain <- bind_rows(pv_up20MW, pv_down20MW)
# Check result
cat("Total solar PV plants in Spain:", nrow(pv_spain), "\n")
pv_data <- "data/Global-Solar-Power-Tracker-February-2025.xlsx"
# Save filtered dataset to CSV
write.csv(pv_spain, "data/pv_spain.csv", row.names = FALSE)
library(sf)
library(sf)
head(pv_spain)
pv_data <- "data/Global-Solar-Power-Tracker-February-2025.xlsx"
#Read both sheets
pv_up20MW   <- read_excel(pv_data, sheet = "20 MW+")
pv_down20MW <- read_excel(pv_data, sheet = "1-20 MW")
# Filter only Spain
pv_up20MW <- pv_up20MW %>%
filter(`Country/Area` == "Spain")
pv_data <- "data/Global-Solar-Power-Tracker-February-2025.xlsx"
#Read both sheets
pv_up20MW   <- read_excel(pv_data, sheet = "20 MW+")
library(readxl)
library(dplyr)
library(sf)
pv_data <- "data/Global-Solar-Power-Tracker-February-2025.xlsx"
#Read both sheets
pv_up20MW   <- read_excel(pv_data, sheet = "20 MW+")
pv_down20MW <- read_excel(pv_data, sheet = "1-20 MW")
# Filter only Spain
pv_up20MW <- pv_up20MW %>%
filter(`Country/Area` == "Spain")
pv_down20MW <- pv_down20MW %>%
filter(`Country/Area` == "Spain")
# Combine into one dataset
pv_spain <- bind_rows(pv_up20MW, pv_down20MW)
head(pv_spain)
# convert to spatial using sf
pv_spain_sf <- st_as_sf(
pv_spain,
coords = c("Longitude", "Latitude"),
crs = 4326
)
#Save spatial as shapefile
st_write(pv_spain_sf, "data/pv_spain.shp")
#Save spatial as geopckage
st_write(pv_spain_sf, "data/pv_spain.gpkg")
library(mapview)
install.packages(mapview)
install.packages("mapview")
library(mapview)
library(mapview)
# Filter global solar PV dataset to keep only installations in Spain and transform data to spatial data
install.packages("mapview")
library(mapview)
install.packages("mapview")
ilibrary(mapview)
library(mapview)
install.packages("xfun")
install.packages(c("raster", "leaflet", "servr", "leafem"), dependencies = TRUE)
install.packages("mapview", dependencies = TRUE)
library(mapview)
Sys.which("make")
library(mapview)
install.packages("mapview", dependencies = TRUE)
remove.packages("raster")
install.packages("raster", dependencies = TRUE)
# 1. Eliminar terra roto
remove.packages("terra")
# 2. Instalar binario estable de terra
install.packages("terra", type = "binary")
# 3. Ahora reinstalar raster con dependencias
install.packages("raster", dependencies = TRUE, type = "binary")
# 4. Por último reinstalar mapview
install.packages("mapview", dependencies = TRUE, type = "binary")
library(mapview)
mapview(pv_spain_sf)
library(readxl)
library(dplyr)
library(sf)
library(mapview)
pv_data <- "data/Global-Solar-Power-Tracker-February-2025.xlsx"
#Read both sheets
pv_up20MW   <- read_excel(pv_data, sheet = "20 MW+")
pv_down20MW <- read_excel(pv_data, sheet = "1-20 MW")
# Filter only Spain
pv_up20MW <- pv_up20MW %>%
filter(`Country/Area` == "Spain")
pv_down20MW <- pv_down20MW %>%
filter(`Country/Area` == "Spain")
# Combine into one dataset
pv_spain <- bind_rows(pv_up20MW, pv_down20MW)
# Check result
cat("Total solar PV plants in Spain:", nrow(pv_spain), "\n")
# Save filtered dataset to CSV
write.csv(pv_spain, "data/pv_spain.csv", row.names = FALSE)
# convert to spatial using sf
pv_spain_sf <- st_as_sf(
pv_spain,
coords = c("Longitude", "Latitude"),
crs = 4326
)
#Save spatial as shapefile
st_write(pv_spain_sf, "data/pv_spain.shp")
mapview(pv_spain_sf)
library(sf)
library(dplyr)
pv_spain_excell <-st_read("data/pv_spain.gpkg", quiet = TRUE) #Previously created gpkg
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE) #Polygon pv layer
pv_spain_excell <-st_read("data/pv_spain.gpkg", quiet = TRUE) #Previously created gpkg
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE) #Polygon pv layer
#Assure same CRS
allsolar <- st_transform(allsolar, st_crs(pv_sf))
#Assure same CRS
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
st_geometry_type(allsolar)
pv_spain_joined <- st_join(allsolar, pv_spain_excell, join = st_intersects)
pv_spain_join <- st_join(allsolar, pv_spain_excell, join = st_intersects)
#Select relevants columns
pv_spain_joined <- pv_spain_join %>%
select(all_of(names(allsolar)), `Project Name`, `Start year`, `Capacity (MW)`)
View(pv_spain_excell)
#Select relevants columns
pv_spain_joined <- pv_spain_join %>%
select(all_of(names(allsolar)), `Project.Name`, `Start year`, `Capacity (MW)`)
View(pv_spain_excell)
#Select relevants columns
pv_spain_joined <- pv_spain_join %>%
select(all_of(names(allsolar)), `Project.Name`, `Start.year`, `Capacity..MW.`)
names(pv_spain)
# Columnas del gpkg/spatial
names(pv_spain_sf)
# Columnas de allsolar
names(allsolar)
# Columnas después del join
names(pv_spain_join)
View(pv_spain_joined)
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
st_write(pv_spain_joined, "data/allsolar_Spain_joined.shp", delete_layer = TRUE, quiet = TRUE)
names(pv_spain_joined)
library(janitor)
install.packages(janitor)
install.packages("janitor")
library(janitor)
pv_spain_joined <- pv_spain_joined %>% clean_names()
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character))
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
pv_spain_joined <- pv_spain_joined %>%
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character)) %>%
mutate(across(where(lubridate::is.Date), as.character))
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character)) %>%        # factores → caracteres
mutate(across(where(lubridate::is.Date), as.character))  # fechas → caracteres
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
pv_spain_joined <- pv_spain_joined %>% clean_names()
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character)) %>%        # factores → caracteres
mutate(across(where(lubridate::is.Date), as.character))  # fechas → caracteres
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.list), ~as.character(.)))
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
pv_spain_joined <- pv_spain_joined %>% clean_names()
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character))
# Convertir listas a texto concatenado
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(x, collapse = ", "))))
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
st_geometry(pv_spain_joined)
names(pv_spain_joined)
st_geometry(pv_spain_joined) <- "geometry"
pv_spain_joined <- pv_spain_joined %>% clean_names()
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character))
# Convertir listas a texto concatenado
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(x, collapse = ", "))))
st_geometry(pv_spain_joined) <- "geometry"
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
# Mantener la geometría de allsolar (polígonos)
pv_spain_joined <- st_join(allsolar, pv_spain_excell, join = st_intersects)
# Verifica la geometría
st_geometry(pv_spain_joined)
pv_spain_joined <- pv_spain_joined %>%
clean_names() %>%
mutate(across(where(is.factor), as.character)) %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(x, collapse = ", "))))
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
pv_spain_excell <-st_read("data/pv_spain.gpkg", quiet = TRUE) #Previously created gpkg
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE) #Polygon pv layer
#Assure same CRS
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
#Join layers
st_geometry_type(allsolar)
pv_spain_join <- st_join(allsolar, pv_spain_excell, join = st_intersects)
pv_spain_joined <- pv_spain_joined %>%
clean_names()
# Convertir factores a character (excepto geometría)
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character))
# Convertir listas a character, **pero ignorar la geometría**
geometry_col <- attr(pv_spain_joined, "sf_column")
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.list) & !names(.) %in% geometry_col, ~ sapply(., function(x) paste(x, collapse = ", "))))
#Assure same CRS
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
#Join layers
st_geometry_type(allsolar)
pv_spain_join <- st_join(allsolar, pv_spain_excell, join = st_intersects)
geom_col <- attr(pv_spain_joined, "sf_column")
# Convertir factores a character en todas las columnas excepto geometría
cols_to_mutate <- setdiff(names(pv_spain_joined), geom_col)
pv_spain_joined <- pv_spain_joined %>%
clean_names() %>%
mutate(across(all_of(cols_to_mutate), ~ if(is.factor(.)) as.character(.) else .)) %>%
mutate(across(all_of(cols_to_mutate), ~ if(is.list(.)) sapply(., function(x) paste(x, collapse = ", ")) else .))
# Reconstruir la geometría para asegurarse que sigue siendo sf
st_geometry(pv_spain_joined) <- geom_col
st_geometry(pv_spain_joined)
pv_spain_joined <- pv_spain_joined %>%
clean_names() %>%
mutate(across(all_of(cols_to_mutate), ~ if(is.factor(.)) as.character(.) else .)) %>%
mutate(across(all_of(cols_to_mutate), ~ if(is.list(.)) sapply(., function(x) paste(x, collapse = ", ")) else .))
library(sf)
library(dplyr)
library(janitor)
pv_spain_excell <-st_read("data/pv_spain.gpkg", quiet = TRUE) #Previously created gpkg
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE) #Polygon pv layer
#Assure same CRS
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
#Join layers
st_geometry_type(allsolar)
pv_spain_join <- st_join(allsolar, pv_spain_excell, join = st_intersects)
# Asegurarse de que tenemos la geometría original
geom_col <- attr(pv_spain_join, "sf_column") # debería ser "geometry" o similar
print(geom_col)
# Hacer todas las transformaciones, **excluyendo la geometría**
pv_spain_joined <- pv_spain_join %>%
clean_names() %>%
mutate(across(where(is.factor), as.character)) %>%
mutate(across(
.cols = !names(.) %in% geom_col & where(is.list),
.fns = ~ sapply(., function(x) paste(x, collapse = ", "))
))
pv_spain_excell <-st_read("data/pv_spain.gpkg", quiet = TRUE) #Previously created gpkg
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE) #Polygon pv layer
#Assure same CRS
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
pv_spain_joined <- pv_spain_joined %>%
mutate(across(where(is.factor), as.character)) %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(x, collapse = ", "))))
# Comprobar geometría
geom_col <- attr(pv_spain_joined, "sf_column")
print(geom_col)  # debería devolver "geometry"
# Guardar resultado
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE, quiet = TRUE)
pv_spain_excell <-st_read("data/pv_spain.gpkg", quiet = TRUE) #Previously created gpkg
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE) #Polygon pv layer
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
# Join espacial
pv_spain_joined <- st_join(allsolar, pv_spain_excell, join = st_intersects)
# Nombre de la geometría
geom_col <- attr(pv_spain_joined, "sf_column")
# Limpiar nombres y convertir factores/listas **sin tocar geometría**
pv_spain_joined <- pv_spain_joined %>%
clean_names() %>%
mutate(across(where(is.factor), as.character)) %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(x, collapse = ", ")), .names = "{.col}"))
# **Reafirmar la geometría explícitamente** antes de guardar
st_geometry(pv_spain_joined) <- geom_col
# Guardar resultado
st_write(pv_spain_joined, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE)
library(sf)
library(dplyr)
library(janitor)
# Leer capas
pv_spain_excell <- st_read("data/pv_spain.gpkg", quiet = TRUE)
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE)
# Asegurar CRS idéntico
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
# Join espacial (polígonos sobre puntos)
joined <- st_join(allsolar, pv_spain_excell, join = st_intersects)
# Limpiar nombres (solo las columnas de datos, no la geometría)
joined_clean <- joined %>%
clean_names()
# Extraer solo la geometría original de 'allsolar' y columnas clave
cols_to_keep <- c("project_name", "start_year", "capacity_mw") # ajustar según nombres limpios
joined_final <- joined_clean %>%
select(all_of(cols_to_keep), geometry)  # geometry al final
# Verificar geometría
st_geometry(joined_final)  # debería devolver 'geometry'
# Guardar seguro en GeoPackage
st_write(joined_final, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE)
View(pv_spain_join)
rm(pv_spain_join, pv_spain_joined)
gc()
library(sf)
library(dplyr)
library(janitor)
# Leer capas
pv_spain_excell <- st_read("data/pv_spain.gpkg", quiet = TRUE)
allsolar <- st_read("data/allsolar_cut.shp", quiet = TRUE)
# Asegurar CRS idéntico
allsolar <- st_transform(allsolar, st_crs(pv_spain_excell))
# Join espacial (polígonos sobre puntos)
joined <- st_join(allsolar, pv_spain_excell, join = st_intersects)
# Limpiar nombres (solo las columnas de datos, no la geometría)
joined_clean <- joined %>%
clean_names()
# Extraer solo la geometría original de 'allsolar' y columnas clave
cols_to_keep <- c("project_name", "start_year", "capacity_mw") # ajustar según nombres limpios
joined_final <- joined_clean %>%
select(all_of(cols_to_keep), geometry)  # geometry al final
# Verificar geometría
st_geometry(joined_final)  # debería devolver 'geometry'
# Guardar seguro en GeoPackage
st_write(joined_final, "data/allsolar_Spain_joined.gpkg", delete_layer = TRUE)

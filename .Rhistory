# Extract coordinates
coords <- st_coordinates(gps_sf_proj)
# Define observation window
win <- owin(xrange = range(coords[,1]), yrange = range(coords[,2]))
# Create point pattern object
ppp_obj <- ppp(x = coords[,1], y = coords[,2], window = win)
# Compute KDE (adjust sigma for smoothing)
kde <- density.ppp(ppp_obj, sigma = 5000)
library(stars)
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS_.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS_.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# List all csv files from data/ folder that match the pattern
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS_.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
library(sf)
library(dplyr)
library(readr)
library(readxl)
library(mapview)
library(viridis)
library(ggplot2)
library(spatstat.geom)
library(spatstat)
library(raster)
# List all csv files from data/ folder that match the pattern
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS_.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, col_types = cols(.default = col_guess()))
# Keep only relevant columns
cols_to_keep <- intersect(c("birdID","device_id","X_4326","Y_4326","date","time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# List all csv files from data/ folder that match the pattern
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, col_types = cols(.default = col_guess()))
# Keep only relevant columns
cols_to_keep <- intersect(c("birdID","device_id","X_4326","Y_4326","date","time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, show_col_types = FALSE)
# Keep only relevant columns if they exist
cols_to_keep <- intersect(
c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"),
names(df)
)
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if ("birdID" %in% names(df)) df$birdID <- as.character(df$birdID)
if ("device_id" %in% names(df)) df$device_id <- as.character(df$device_id)
if ("X_4326" %in% names(df)) df$X_4326 <- as.numeric(df$X_4326)
if ("Y_4326" %in% names(df)) df$Y_4326 <- as.numeric(df$Y_4326)
if ("date" %in% names(df)) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, show_col_types = FALSE)
# Keep only relevant columns if they exist
cols_to_keep <- intersect(
c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"),
names(df)
)
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if ("birdID" %in% names(df)) df$birdID <- as.character(df$birdID)
if ("device_id" %in% names(df)) df$device_id <- as.character(df$device_id)
if ("X_4326" %in% names(df)) df$X_4326 <- as.numeric(df$X_4326)
if ("Y_4326" %in% names(df)) df$Y_4326 <- as.numeric(df$Y_4326)
if ("date" %in% names(df)) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
library(sf)
library(dplyr)
library(readr)
library(readxl)
library(mapview)
library(viridis)
library(ggplot2)
library(spatstat.geom)
library(spatstat)
library(raster)
# List all csv files from data/ folder that match the pattern
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS_.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, show_col_types = FALSE)
# Keep only relevant columns if they exist
cols_to_keep <- intersect(
c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"),
names(df)
)
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if ("birdID" %in% names(df)) df$birdID <- as.character(df$birdID)
if ("device_id" %in% names(df)) df$device_id <- as.character(df$device_id)
if ("X_4326" %in% names(df)) df$X_4326 <- as.numeric(df$X_4326)
if ("Y_4326" %in% names(df)) df$Y_4326 <- as.numeric(df$Y_4326)
if ("date" %in% names(df)) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, show_col_types = FALSE)
# Remove weird first column if exists (like ...1)
if ("...1" %in% names(df)) {
df <- df %>% select(-"...1")
}
# Force into data.frame for safety
df <- as.data.frame(df)
# Keep only relevant columns if they exist
cols_to_keep <- intersect(
c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"),
names(df)
)
df <- df[, cols_to_keep, drop = FALSE]
# Force column types
if ("birdID" %in% names(df)) df$birdID <- as.character(df$birdID)
if ("device_id" %in% names(df)) df$device_id <- as.character(df$device_id)
if ("X_4326" %in% names(df)) df$X_4326 <- as.numeric(df$X_4326)
if ("Y_4326" %in% names(df)) df$Y_4326 <- as.numeric(df$Y_4326)
if ("date" %in% names(df)) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Read and combine all files into one dataframe
gps_data <- files %>%
map_df(function(f) {
df <- read_csv(f, guess_max = 10000, show_col_types = FALSE)
# Drop index column if present
if ("...1" %in% names(df)) df <- df %>% select(-`...1`)
# Keep only the columns we want (if they exist in this file)
cols_to_keep <- intersect(c("birdID","device_id","X_4326","Y_4326","date","time_gmt0"), names(df))
df <- df %>% dplyr::select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% names(df)) df$birdID <- as.character(df$birdID)
if("device_id" %in% names(df)) df$device_id <- as.character(df$device_id)
if("X_4326" %in% names(df)) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% names(df)) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% names(df)) df$date <- as.Date(df$date)
return(df)
})
library(sf)
library(dplyr)
library(readr)
library(readxl)
# List all csv files from data/ folder that match the pattern
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS_.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Kernel Density Estimation and Map of Iberian Bustard GPS Locations
library(sf)
library(dplyr)
library(readr)
library(mapview)
# List all csv files from data/ folder that match the pattern
files <- list.files("data/GPS", pattern = "^filtered_prep_BBS_.*\\.csv$", full.names = TRUE)
# Read and combine all files into one dataframe
gps_data <- lapply(files, function(f) {
df <- read_csv(f, guess_max = 10000, col_types = cols(.default = col_guess()))
# Keep only relevant columns if they exist
cols_to_keep <- intersect(c("birdID", "device_id", "X_4326", "Y_4326", "date", "time_gmt0"), names(df))
df <- df %>% select(all_of(cols_to_keep))
# Force column types
if("birdID" %in% cols_to_keep) df$birdID <- as.character(df$birdID)
if("device_id" %in% cols_to_keep) df$device_id <- as.character(df$device_id)
if("X_4326" %in% cols_to_keep) df$X_4326 <- as.numeric(df$X_4326)
if("Y_4326" %in% cols_to_keep) df$Y_4326 <- as.numeric(df$Y_4326)
if("date" %in% cols_to_keep) df$date <- as.Date(df$date)
return(df)
}) %>% bind_rows()
# Convert to sf object (assuming lon/lat columns are "location_long" and "location_lat")
gps_sf <- st_as_sf(gps_data, coords = c("X_4326", "Y_4326"), crs = 4326)
# KDE
library(viridis)
library(ggplot2)
library(spatstat.geom)
library(spatstat)
library(raster)
library(stars)
# Transform coordinates to metric CRS (meters)
gps_sf_m <- st_transform(gps_sf, 3857)
bbox <- st_bbox(gps_sf_m)
# Create empty stars raster template
res_m <- 5000  # 5 km resolution
x_vals <- seq(bbox["xmin"], bbox["xmax"], by = res_m)
y_vals <- seq(bbox["ymin"], bbox["ymax"], by = res_m)
grid <- st_as_stars(st_bbox(gps_sf_m), dx = res_m, dy = res_m)
# --- Step 3: Count points per cell (rasterize) ---
gps_raster <- st_rasterize(gps_sf_m["birdID"], template = grid, fun = "length")
# --- Step 4: Mapview of density raster ---
x11()  # open new plotting window
mapview(gps_raster, col.regions = viridis(100), alpha = 0.7, legend = TRUE)
bbox <- c(xmin = -1800000, xmax = 1800000, ymin = 3600000, ymax = 4700000)
grid <- st_as_stars(bbox, dx = res_m, dy = res_m)
# Transform coordinates to metric CRS (meters)
gps_sf_m <- st_transform(gps_sf, 3857)
bbox <- c(xmin = -1800000, xmax = 1800000, ymin = 3600000, ymax = 4700000)
grid <- st_as_stars(bbox, dx = res_m, dy = res_m)
# Convert to sf object (assuming lon/lat columns are "location_long" and "location_lat")
gps_sf <- st_as_sf(gps_data, coords = c("X_4326", "Y_4326"), crs = 4326)
# KDE
library(viridis)
library(ggplot2)
library(spatstat.geom)
library(spatstat)
library(raster)
library(stars)
# Transform coordinates to metric CRS (meters)
gps_sf_m <- st_transform(gps_sf, 3857)
# 3. Crear grid / raster de densidad
res_m <- 5000  # resolución 5 km
bbox_sf <- st_as_sfc(st_bbox(gps_sf_m))   # bounding box de los puntos
grid <- st_as_stars(bbox_sf, dx = res_m, dy = res_m)  # raster vacío
# 4. Contar puntos en cada celda (agregado)
grid_counts <- st_rasterize(gps_sf_m, template = grid)
# 5. Mapview del KDE / densidad
x11()  # abrir en nueva ventana
mapview(grid_counts,
col.regions = viridis(100),
alpha = 0.7,
legend = TRUE,
na.color = "transparent")  # los ceros serán transparentes
# Transform coordinates to metric CRS (meters)
gps_sf_m <- st_transform(gps_sf, 3857)
res_m <- 5000  # 5 km
# Bounding box amplio (Iberia + Canarias)
bbox_manual <- c(xmin = -1200000, xmax = 4000000, ymin = 3500000, ymax = 5200000)
grid <- st_as_stars(st_bbox(c(xmin=bbox_manual["xmin"], xmax=bbox_manual["xmax"],
ymin=bbox_manual["ymin"], ymax=bbox_manual["ymax"]), crs = 3857),
dx = res_m, dy = res_m)
# Transform coordinates to metric CRS (meters)
gps_sf_m <- st_transform(gps_sf, 3857)
# Resolución del grid
res_m <- 5000  # 5 km
# Bounding box manual amplio
bbox_manual <- c(xmin = -1200000, xmax = 4000000, ymin = 3500000, ymax = 5200000)
# Definir número de filas y columnas
nx <- ceiling((bbox_manual["xmax"] - bbox_manual["xmin"]) / res_m)
ny <- ceiling((bbox_manual["ymax"] - bbox_manual["ymin"]) / res_m)
# Crear raster vacío tipo stars
grid <- st_as_stars(
x = array(NA, dim = c(nx, ny)),
dimensions = st_dimensions(
x = seq(bbox_manual["xmin"], bbox_manual["xmax"], length.out = nx),
y = seq(bbox_manual["ymin"], bbox_manual["ymax"], length.out = ny)
),
crs = 3857
)
# Transform coordinates to metric CRS (meters)
gps_sf_m <- st_transform(gps_sf, 3857)
res_m <- 5000  # 5 km
# Bounding box manual ampliado para incluir Canarias
bbox_manual <- c(xmin = -1200000, xmax = 4000000, ymin = 3500000, ymax = 5200000)
# Crear dimensiones regulares
dims <- st_dimensions(
x = seq(from = bbox_manual["xmin"], to = bbox_manual["xmax"], by = res_m),
y = seq(from = bbox_manual["ymin"], to = bbox_manual["ymax"], by = res_m)
)
# Crear un stars vacío con esas dimensiones
grid <- st_as_stars(dims, values = NA_real_)
# Transform coordinates to metric CRS (meters)
gps_sf_m <- st_transform(gps_sf, 3857)
res_m <- 5000
# 6. Compute bounding box
bbox <- st_bbox(gps_sf_m)
# 7. Create stars grid template
grid <- st_as_stars(st_bbox(gps_sf_m), dx = res_m, dy = res_m)
# 8. Rasterize points to count per cell
grid_counts <- st_rasterize(gps_sf_m, template = grid)
# 9. Make zero cells transparent
grid_counts[grid_counts == 0] <- NA
# 10. Visualize with mapview (transparent zeros)
x11()
mapview(grid_counts,
col.regions = viridis(100),
alpha = 0.7,
legend = TRUE,
na.color = "transparent")
# 9. Make zero cells transparent
grid_counts[is.na(grid_counts[])] <- NULL
# 9. Make zero cells transparent
grid_counts[grid_counts == 0] <- NA_real_
mapview(grid_counts,
col.regions = viridis(100),
alpha = 0.7,
legend = TRUE)
mapview(grid_counts,
col.regions = viridis(100),
alpha = 0.7,
legend = TRUE,
na.color = "transparent")
library(rnaturalearth)
library(rnaturalearthdata)
# Detect points outside Spain to identify birds giving weird locations
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(rnaturalearth)
library(rnaturalearthdata)
# Get Spain polygon
spain <- ne_countries(country = "Spain", scale = "medium", returnclass = "sf")
spain <- st_transform(spain, 4326)  # same CRS as gps_sf
# Check which points are inside Spain
inside <- st_within(gps_sf, spain, sparse = FALSE)
gps_outside <- gps_sf[!inside, ]
# Print birdIDs with points outside Spain
if(nrow(gps_outside) > 0){
cat("Birds with points outside Spain:\n")
print(unique(gps_outside$birdID))
} else {
cat("No points outside Spain detected.\n")
}
# Optional: mapview to see points outside in red
x11()
mapview(gps_sf, col.region = "green", cex = 3, alpha = 0.4, legend = FALSE) +
mapview(gps_outside, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
mapview(gps_outside, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
# Check which points are inside Spain
inside <- st_within(gps_sf, iberia, sparse = FALSE)
# Get Iberia polygon
iberia <- ne_countries(country = c("Spain", "Portugal"), scale = "medium", returnclass = "sf")
iberia <- st_transform(iberia, 4326)  # same CRS as gps_sf
# Check which points are inside Spain
inside <- st_within(gps_sf, iberia, sparse = FALSE)
# Filtrar los que están fuera
gps_outside <- gps_sf[!inside, ]
# Check which points are inside Spain
inside <- st_within(gps_sf, iberia, sparse = FALSE)
# Filtrar los que están fuera
gps_outside <- gps_sf[!inside, ]
# Transform to vector
inside_vec <- apply(st_within(gps_sf, spain, sparse = FALSE), 1, any)
# Transform to vector
inside_vec <- apply(st_within(gps_sf, iberia, sparse = FALSE), 1, any)
# Filtrar los que están fuera
gps_outside <- gps_sf[!inside_vec, ]
# Mostrar birdIDs con puntos fuera
if(nrow(gps_outside) > 0){
cat("Birds with points outside Spain and Portugal:\n")
print(unique(gps_outside$birdID))
} else {
cat("No points outside Spain and Portugal detected.\n")
}
# Optional: mapview to see points outside in red
x11()
mapview(gps_outside, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
View(gps_outside)
library(sf)
library(dplyr)
library(mapview)
library(osmdata)
# 1. Read pv_spain.csv and convert to sf ---
pv_spain <- read.csv("data/pv_spain.csv", stringsAsFactors = FALSE)
# Convert CSV points to sf object with WGS84 coordinates
pv_sf <- st_as_sf(pv_spain, coords = c("Longitude", "Latitude"), crs = 4326)
# 2. Prepare OSM solar plants layer
solar_polygons <- spain_solar$osm_polygons
solar_multipolygons <- spain_solar$osm_multipolygons
# Make geometries valid and combine
solar_plants <- bind_rows(
st_make_valid(solar_polygons),
st_make_valid(solar_multipolygons)
)
# Transform OSM layer to WGS84 CRS to match pv_sf
solar_plants <- st_transform(solar_plants, 4326)
# 1. Read pv_spain.csv and convert to sf
pv_spain <- read.csv("data/pv_spain.csv", stringsAsFactors = FALSE)
# Keep only operating plants
pv_spain_operating <- pv_spain %>%
filter(Status == "operating")
# Convert CSV points to sf object with WGS84 coordinates
pv_sf <- st_as_sf(pv_spain, coords = c("Longitude", "Latitude"), crs = 4326)
# 2. Prepare OSM solar plants layer
solar_polygons <- spain_solar$osm_polygons
solar_multipolygons <- spain_solar$osm_multipolygons
# Make geometries valid and combine
solar_plants <- bind_rows(
st_make_valid(solar_polygons),
st_make_valid(solar_multipolygons)
)
# Transform OSM layer to WGS84 CRS to match pv_sf
solar_plants <- st_transform(solar_plants, 4326)
# --- 3. Add missing attributes to OSM layer for compatibility ---
# Keep placeholder columns to match pv_spain attributes we care about
# e.g., Name, Capacity, Start year
solar_plants <- solar_plants %>%
mutate(
Project.Name = ifelse(!is.na(name), name, NA),
Capacity.MW = NA_real_,
Start.Year = NA_integer_
)
# --- 4. Combine layers complementarily ---
# pv_spain points + OSM polygons
# st_union could dissolve geometries; instead use bind_rows to keep all features
combined_pv <- bind_rows(
st_make_valid(pv_sf),
st_make_valid(solar_plants)
)
# --- 5. Quick mapview visualization ---
x11()
mapview(combined_pv, zcol = "Project.Name", col.regions = "orange", cex = 5, alpha = 0.7, legend = TRUE)
View(combined_pv)

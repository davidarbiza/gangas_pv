idx <- match(allsolar_assigned_nearest$point_id, pv_spain_excell$point_id)
# Calculate polygon → point distance in meters
allsolar_assigned_nearest$distance_m <- as.numeric(
st_distance(st_geometry(allsolar_3857), st_geometry(pv_points_3857)[idx], by_element = TRUE)
)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
poligonos_invalidos <- allsolar_assigned_nearest %>% filter(!assigned_valid)
mapview(poligonos_invalidos,zcol = "distance_m",col.regions = viridis(100), legend = TRUE) +
mapview(pv_spain_excell, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
library(sf)
library(dplyr)
library(mapview)
library(viridis)
pv_spain_excell <- st_read("data/pv_spain.gpkg", quiet = TRUE)
allsolar <- st_read("data/allsolar_cut_diss.shp", quiet = TRUE)
# Assure same CRS
allsolar <- st_transform(allsolar, 4326)
pv_spain_excell <- st_transform(pv_spain_excell, 4326)
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating") %>%
filter(!(
# Baleares
(st_coordinates(.)[,2] >= 38 & st_coordinates(.)[,2] <= 41.5 &
st_coordinates(.)[,1] >= 0 & st_coordinates(.)[,1] <= 5) |
# Canarias
(st_coordinates(.)[,2] >= 27 & st_coordinates(.)[,2] <= 30 &
st_coordinates(.)[,1] >= -19 & st_coordinates(.)[,1] <= -13)
))
# Create id for each obs.
pv_spain_excell <- pv_spain_excell %>% mutate(point_id = row_number())
allsolar <- allsolar %>% mutate(poly_id = row_number())
# Repair invalid geometries
allsolar <- st_make_valid(allsolar)
# Remove duplicates vertices
allsolar <- st_buffer(allsolar, 0)
# Assign nearest PV point
nearest_idx <- st_nearest_feature(st_geometry(allsolar), st_geometry(pv_spain_excell))
allsolar_assigned_nearest <- allsolar %>%
mutate(
point_id = pv_spain_excell$point_id[nearest_idx],
project_name = pv_spain_excell$Project.Name[nearest_idx],
start_year = pv_spain_excell$`Start.year`[nearest_idx],
capacity_mw = pv_spain_excell$`Capacity..MW.`[nearest_idx],
location_accuracy = pv_spain_excell$Location.accuracy[nearest_idx]
)
# Transform to metric CRS for distance calculation
allsolar_3857 <- st_transform(allsolar_assigned_nearest, 3857)
pv_points_3857 <- st_transform(pv_spain_excell, 3857)
# Match polygon IDs with point IDs
idx <- match(allsolar_assigned_nearest$point_id, pv_spain_excell$point_id)
# Calculate polygon → point distance in meters
allsolar_assigned_nearest$distance_m <- as.numeric(
st_distance(st_geometry(allsolar_3857), st_geometry(pv_points_3857)[idx], by_element = TRUE)
)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Mapview
mapview(allsolar_assigned_nearest, zcol = "distance_m")  # visualize all polygons colored by distance
# Mapview grouped by assigned_valid
poligonos_invalidos <- allsolar_assigned_nearest %>% filter(!assigned_valid)
mapview(poligonos_invalidos,zcol = "distance_m",col.regions = viridis(100), legend = TRUE) +
mapview(pv_spain_excell, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
islands_removed <- pv_spain_excell %>%
filter(
(st_coordinates(.)[,2] >= 38 & st_coordinates(.)[,2] <= 41.5 &
st_coordinates(.)[,1] >= 0 & st_coordinates(.)[,1] <= 5) |
(st_coordinates(.)[,2] >= 27 & st_coordinates(.)[,2] <= 30 &
st_coordinates(.)[,1] >= -19 & st_coordinates(.)[,1] <= -13)
)
mapview(islands_removed)
View(allsolar_assigned_nearest)
View(allsolar_assigned_nearest)
# Assure same CRS
allsolar <- st_transform(allsolar, 4326)
pv_spain_excell <- st_transform(pv_spain_excell, 4326)
pv_spain_excell <- st_transform(pv_spain_excell, 4326)
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating") %>%
filter(!(
# Baleares
(st_coordinates(.)[,2] >= 38 & st_coordinates(.)[,2] <= 41.5 &
st_coordinates(.)[,1] >= 0 & st_coordinates(.)[,1] <= 5) |
# Canarias
(st_coordinates(.)[,2] >= 27 & st_coordinates(.)[,2] <= 30 &
st_coordinates(.)[,1] >= -19 & st_coordinates(.)[,1] <= -13)
))
pv_spain_excell <- st_read("data/pv_spain.gpkg", quiet = TRUE)
# Assure same CRS
allsolar <- st_transform(allsolar, 4326)
pv_spain_excell <- st_transform(pv_spain_excell, 4326)
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating")
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating") %>%
filter(!(
# Baleares
(st_coordinates(.)[,2] >= 38 & st_coordinates(.)[,2] <= 41.5 &
st_coordinates(.)[,1] >= 0 & st_coordinates(.)[,1] <= 5) |
# Canarias
(st_coordinates(.)[,2] >= 27 & st_coordinates(.)[,2] <= 30 &
st_coordinates(.)[,1] >= -19 & st_coordinates(.)[,1] <= -13)
))
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating")
pv_spain_excell <- st_read("data/pv_spain.gpkg", quiet = TRUE)
pv_spain_excell <- st_transform(pv_spain_excell, 4326)
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating")
mapview(pv_spain_excell)
mapview(poligonos_invalidos,zcol = "distance_m",col.regions = viridis(100), legend = TRUE) +
mapview(pv_spain_excell, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
pv_spain_excell <- st_read("data/pv_spain.gpkg", quiet = TRUE)
allsolar <- st_read("data/allsolar_cut_diss.shp", quiet = TRUE)
# Assure same CRS
allsolar <- st_transform(allsolar, 4326)
pv_spain_excell <- st_transform(pv_spain_excell, 4326)
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating") %>%
filter(!(
# Baleares
(st_coordinates(.)[,2] >= 38 & st_coordinates(.)[,2] <= 41.5 &
st_coordinates(.)[,1] >= 0 & st_coordinates(.)[,1] <= 5) |
# Canarias
(st_coordinates(.)[,2] >= 27 & st_coordinates(.)[,2] <= 30 &
st_coordinates(.)[,1] >= -19 & st_coordinates(.)[,1] <= -13)
))
mapview(pv_spain_excell)
pv_spain_excell <- st_read("data/pv_spain.gpkg", quiet = TRUE)
allsolar <- st_read("data/allsolar_cut_diss.shp", quiet = TRUE)
# Assure same CRS
allsolar <- st_transform(allsolar, 4326)
pv_spain_excell <- st_transform(pv_spain_excell, 4326)
# Filter only operating plants + Exclude Canarias and Baleares
pv_spain_excell <- pv_spain_excell %>%
filter(Status == "operating") %>%
filter(!(
# Baleares
(st_coordinates(.)[,2] >= 38.5 & st_coordinates(.)[,2] <= 40.2 &
st_coordinates(.)[,1] >= 1 & st_coordinates(.)[,1] <= 4.5) |
# Canarias
(st_coordinates(.)[,2] >= 27 & st_coordinates(.)[,2] <= 30 &
st_coordinates(.)[,1] >= -19 & st_coordinates(.)[,1] <= -13)
))
mapview(pv_spain_excell)
# Create id for each obs.
pv_spain_excell <- pv_spain_excell %>% mutate(point_id = row_number())
allsolar <- allsolar %>% mutate(poly_id = row_number())
# Repair invalid geometries
allsolar <- st_make_valid(allsolar)
# Remove duplicates vertices
allsolar <- st_buffer(allsolar, 0)
# Assign nearest PV point
nearest_idx <- st_nearest_feature(st_geometry(allsolar), st_geometry(pv_spain_excell))
allsolar_assigned_nearest <- allsolar %>%
mutate(
point_id = pv_spain_excell$point_id[nearest_idx],
project_name = pv_spain_excell$Project.Name[nearest_idx],
start_year = pv_spain_excell$`Start.year`[nearest_idx],
capacity_mw = pv_spain_excell$`Capacity..MW.`[nearest_idx],
location_accuracy = pv_spain_excell$Location.accuracy[nearest_idx]
)
# Transform to metric CRS for distance calculation
allsolar_3857 <- st_transform(allsolar_assigned_nearest, 3857)
pv_points_3857 <- st_transform(pv_spain_excell, 3857)
# Match polygon IDs with point IDs
idx <- match(allsolar_assigned_nearest$point_id, pv_spain_excell$point_id)
# Calculate polygon → point distance in meters
allsolar_assigned_nearest$distance_m <- as.numeric(
st_distance(st_geometry(allsolar_3857), st_geometry(pv_points_3857)[idx], by_element = TRUE)
)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Mapview grouped by assigned_valid
poligonos_invalidos <- allsolar_assigned_nearest %>% filter(!assigned_valid)
mapview(poligonos_invalidos,zcol = "distance_m",col.regions = viridis(100), legend = TRUE) +
mapview(pv_spain_excell, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.5, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.75, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Mapview
mapview(allsolar_assigned_nearest, zcol = "distance_m")  # visualize all polygons colored by distance
# Mapview
mapview(allsolar_assigned_nearest, zcol = "distance_m") + # visualize all polygons colored by distance
mapview(pv_spain_excell, col.region = "red", cex = 5, alpha = 0.7, legend = FALSE)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 25,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 50,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 25,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 50,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 50,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.5, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 100,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 1000,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 10000,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 100000,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.15, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Mapview
mapview(allsolar_assigned_nearest, zcol = "distance_m") + # visualize all polygons colored by distance
mapview(pv_spain_excell, col.region = "steelblue", cex = 3.5, alpha = 0.55, legend = FALSE)
# Mapview
mapview(allsolar_assigned_nearest, zcol = "distance_m") + # visualize all polygons colored by distance
mapview(pv_spain_excell, col.region = "lightblue", cex = 3, alpha = 0.4, legend = FALSE)
# Mapview
mapview(allsolar_assigned_nearest, zcol = "distance_m") + # visualize all polygons colored by distance
mapview(pv_spain_excell, col.region = "steelblue", cex = 3, alpha = 0.4, legend = FALSE)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 2, 1), # +15% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 1.5, 1), # +50% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 3, 1), # +50% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
# Estimate area-based radius for validation (MW → 2–5 ha/MW)
allsolar_assigned_nearest <- allsolar_assigned_nearest %>%
mutate(
max_area_ha = capacity_mw * 5,    # 5 ha/MW
max_allow_m = sqrt((max_area_ha * 10000) / pi)*  # max. radius
ifelse(location_accuracy == "approximate", 10, 1), # +50% if location is aprproximate
assigned_valid = distance_m <= max_allow_m
)
# QC
summary(allsolar_assigned_nearest$distance_m)
sum(!is.na(allsolar_assigned_nearest$point_id))
outliers <- allsolar_assigned_nearest %>% filter(!assigned_valid)
table(allsolar_assigned_nearest$assigned_valid)
rm(joined, joined_clean, joined_final, islands_removed, poligonos_validos,)
rm(joined, joined_clean, joined_final, islands_removed, poligonos_validos)
gc()
install.packages("osmdata")
library(osmdata)
library(sf)
library(dplyr)
spain <- getbb("Spain")
# Get PV data
spain_solar <- osmdata_sf(q)
q <- opq(bbox = spain) %>%
add_osm_feature(key = "power", value = "plant") %>%
add_osm_feature(key = "plant:source", value = "solar")
spain_solar <- osmdata_sf(q)
spain_solar
library(mapview)
head(spain_solar$osm_points)
summary(spain_solar$osm_points)
table(spain_solar$osm_points$`generator:type`)
table(spain_solar$osm_points$`plant:method`)
PV_panels <- spain_solar$osm_points # solar PV panels
View(PV_panels)
mapview(PV_panels)
spain_solar
# Select polygons only
solar_polygons <- spain_solar$osm_polygons
solar_multipolygons <- spain_solar$osm_multipolygons
solar_plants <- bind_rows(
st_make_valid(solar_polygons),
st_make_valid(solar_multipolygons)
)
View(solar_plants)
mapview(solar_plants)
solar_plants
PV <- read_sf("data/allsolar_cut_diss.shp")
mapview(solar_plants, col.regions = "orange") + mapview(PV, col.regions = "blue")
PV
mapview(solar_plants, col.regions = "orange") + mapview(PV)
solar_plants_laea <- st_transform(PV)
solar_plants_laea
solar_plants_laea <- st_transform(solar_plants, crs = st_crs(PV))
solar_plants_laea
sum(PV$area)
PV
sum(PV$area)
sum(PV$area)/100000
solar_plants_laea
solar_plants_laea$area_m2 <-st_area(solar_plants_laea)
sum(solar_plants_laea$area_m2)
solar_plants_laea$area_ha <- as.numeric(solar_plants_laea$area_m2) / 10000  #
solar_plants_laea$area_km2 <- as.numeric(solar_plants_laea$area_m2) / 1000000  #
solar_plants_laea$area_ha <- as.numeric(solar_plants_laea$area_m2) / 10000  #
solar_plants_laea$area_km2 <- as.numeric(solar_plants_laea$area_m2) / 1000000  #
PV$area_ha <- as.numeric(PV$area_m2) / 10000  #
PV$area_km2 <- as.numeric(PV$area) / 1000000
PV$area_ha <- as.numeric(PV$area) / 10000  #
PV$area_km2 <- as.numeric(PV$area) / 1000000
sum(PV$area_km2)
sum(solar_plants_laea$area_km2) # 909.8402
rlang::last_trace()
